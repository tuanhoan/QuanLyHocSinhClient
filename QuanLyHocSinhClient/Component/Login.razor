@page "/login" 
@layout EmptyLayout
@using System.Net
@using System.Net.Sockets
@inject NavigationManager Navigation

<div class="container-fluid" >
    <div style="max-width: 400px" class="container justify-content-center align-items-center">
        <MudGrid Class="mt-5">
            <h3>Welcome!</h3>
        </MudGrid>
 
            <EditForm Model="@model" OnSubmit="OnValidSubmit">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="First name" HelperText="Max. 8 characters"
                                      @bind-Value="model.UserName" />
                        <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                      @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        <p>@login</p>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Đăng nhập</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
       
        
    </div>
</div>

@code {
    Account model = new Account();
    string login = "";
    private async void OnValidSubmit()
    {
        string VERSION_APP = "0.0.0.1";
        Dictionary<string, string> headers = new Dictionary<string, string>();
        headers.Add("LocalIpAddress", GetLocalIPAddress());
        headers.Add("PCHostname", Dns.GetHostName());
        headers.Add("AppVersion", VERSION_APP);
        headers.Add("User-Agent", VERSION_APP);
        API<Account>.headers = headers; 
        Program.token = await API<Account>.Instance.Login("api/Authenticate/Login", model);
        if (Program.token != null)
        {
            Navigation.NavigateTo("/", true);
            (Program.Student, Program.Teacher) = await API<(Student, Teacher)>.Instance.GetAsync($"api/Authenticate/{model.UserName}");
        }
        else
        {
            login = "Đăng nhập thất bại";
        }
       
    }
    //protected override async Task OnInitializedAsync()
    //{

    //    var a = await API<List<Student>>.Instance.GetAsync("api/Students");

    //}
    private string GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == AddressFamily.InterNetwork)
            {
                return ip.ToString();
            }
        }
        throw new Exception("No network adapters with an IPv4 address in the system!");
    }

}
