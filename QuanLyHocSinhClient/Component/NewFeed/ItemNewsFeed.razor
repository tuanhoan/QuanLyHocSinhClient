@using System.IO
@inject GoogleDriveServices GoogleDriveServices
<MudCard>
    <MudGrid Spacing="3" Justify="Justify.Center">
        <MudItem xs="2" sm="4">
            @if (!string.IsNullOrEmpty(imgLink))
            {
                <img src="@imgLink" style=" width:20vw; height:30vh;" alt="Ảnh phóng to" />
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
            }
        </MudItem>
        <MudItem xs="10" sm="8">
            <MudCardContent>
                <MudLink Href="@($"newsfeed/{Data.Id}")" Underline="Underline.Hover">@Data.Title</MudLink>
                <MudText Typo="Typo.body2">@Data.Content</MudText>
            </MudCardContent>
        </MudItem>
    </MudGrid> 
</MudCard>

@code
{
    [Parameter] public NewsFeed Data { get; set; }
    string imgLink = "";
    List<(string Link, string PlaceHolder, string Path)> _data = new();
    protected override async Task OnInitializedAsync()
    {
        if (Data.Content.Length > 200)
        {
            Data.Content = Data.Content.Substring(0, 200) + " ...";
        }
        if (Data.Image != null)
        {
            var _listImg = Data.Image.Split("|").ToList();
            _listImg.RemoveAt(_listImg.Count - 1);
            await GoogleDriveServices.PrepareFolderId(0, UploadClassify.CustomerData);
            _data = await GoogleDriveServices.GetFilesMetadataAsync(_listImg, UploadClassify.CustomerData, 0);
            foreach (var item in _data)
            {
                var ext = Path.GetExtension(item.Path);
                if (ext.Equals(".PNG") || ext.Equals(".jpg")|| ext.Equals(".png") || ext.Equals(".JPG"))
                {
                    imgLink = item.PlaceHolder;
                    break;
                }
            }
        }
    }
}
