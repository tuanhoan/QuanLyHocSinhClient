@page "/score"

<MudTable Class="mt-3 diem_table" Items="@subjects" Hover="true" Bordered="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Học kì 1 - Năm 2021-2022</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Môn học</MudTh>
        @foreach (var item in testTypes)
        {
            <MudTd>@item.TestName</MudTd>
        }
        <MudTh>Trung bình</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="SemesterId">@context.Name</MudTd>
        @for (int i = 0; i < testTypes.Count; i++)
        {

            int testTypeId = testTypes[i].Id;
            string dataLabel = testTypes[i].TestName;
            var diem = @scores.FirstOrDefault(x => x.SubjectId == context.Id && x.TestTypeId == testTypeId) != null ? scores.FirstOrDefault(x => x.SubjectId == context.Id && x.TestTypeId == testTypeId).Point : 0;
    <MudTd DataLabel="@dataLabel">@diem</MudTd>

        }
    <MudTd DataLabel="Trung bình">@AverageScore(context.Id)</MudTd>
    </RowTemplate>
</MudTable>

@code {
    int semesterId = 1;
    Guid studentId = new Guid("e37ea4e6-a000-4fb5-dbac-08d9ae862a65");
    List<Score> scores = new List<Score>();
    List<TestType> testTypes = new List<TestType>();
    List<Subject> subjects = new List<Subject>();
    int index = 0;
    double avg = 0;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        testTypes = await API<List<TestType>>.Instance.GetAsync("api/testtypes");
        subjects = await API<List<Subject>>.Instance.GetAsync("api/subjects");
        scores = await API<List<Score>>.Instance.GetAsync($"/api/Scores/ScoresByStudentAndSemester/{Program.Student.Id}/{semesterId}");
    }
    double AverageScore(int subjectId)
    {


        var mieng = scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 5) != null ? scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 5).Point : 0;
        var d15p = scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 2) != null ? scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 2).Point : 0;
        var d60p = scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 3) != null ? scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 3).Point : 0;
        var hocki = scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 4) != null ? scores.FirstOrDefault(x => x.SubjectId == subjectId && x.TestTypeId == 4).Point : 0;
        avg = Math.Round(((mieng + d15p + d60p * 2 + hocki * 3) / 7),2);

        return avg;

    }
}